var QRCode;
(function () {
    function a(a) {
        this.mode = d.MODE_8BIT_BYTE, this.data = a, this.parsedData = [];
        for (var b = [], c = 0, e = this.data.length; c < e; c++) {
            var f = this.data.charCodeAt(c);
            f > 65536 ? (b.push(240 | f >> 18), b.push(128 | f >> 12 & 63), b.push(128 | f >> 6 & 63), b.push(128 | 63 & f)) : f > 2048 ? (b.push(224 | f >> 12), b.push(128 | f >> 6 & 63), b.push(128 | 63 & f)) : f > 128 ? (b.push(192 | f >> 6), b.push(128 | 63 & f)) : b.push(f)
        }
        this.parsedData = this.parsedData.concat(b), this.parsedData.length != this.data.length && (this.parsedData.unshift(191), this.parsedData.unshift(187), this.parsedData.unshift(239))
    }

    function b(a, b) {
        this.typeNumber = a, this.errorCorrectLevel = b, this.modules = null, this.moduleCount = 0, this.dataCache = null, this.dataList = []
    }

    function i(a, b) {
        if (void 0 == a.length) throw new Error(a.length + "/" + b); for (var c = 0; c < a.length && 0 == a[c];) c++;
        this.num = new Array(a.length - c + b); for (var d = 0; d < a.length - c; d++) this.num[d] = a[d + c]
    }

    function j(a, b) {
        this.genPoly = a, this.degree = a.degree, this.coeffs = b, this.degree < 0 && (this.coeffs = [0])
    }

    function k(a, b) {
        this.typeNumber = a, this.errorCorrectLevel = b
    }

    function l(a) {
        if (!a) return "";
        var b = "";
        for (var c in a) b += c + ":" + a[c] + "<br>";
        return b
    }

    function m(a) {
        this.data = a
    }

    function n(a, b) {
        this.reedsolomon = a, this.datacodewords = b, this.eccodewords = new Array(a.degree), this.addjust() 
    }

    function o(a, b, c, d) {
        this.x = a, this.y = b, this.width = c, this.height = d
    }
    a.prototype = {
        getLength: function () {
            return this.parsedData.length
        },
        write: function (a) {
            for (var b = 0, c = this.parsedData.length; b < c; b++) a.put(this.parsedData[b], 8)
        }
    }, b.prototype = {
        addData: function (b) {
            var c = new a(b);
            this.dataList.push(c), this.dataCache = null
        },
        isDark: function (a, b) {
            if (a < 0 || this.moduleCount <= a || b < 0 || this.moduleCount <= b) throw new Error(a + "," + b);
            return this.modules[a][b]
        },
        getModuleCount: function () {
            return this.moduleCount
        },
        make: function () {
            this.makeImpl(!1, this.getBestMaskPattern())
        },
        makeImpl: function (a, c) {
            this.moduleCount = 4 * this.typeNumber + 17, this.modules = new Array(this.moduleCount);
            for (var d = 0; d < this.moduleCount; d++) {
                this.modules[d] = new Array(this.moduleCount);
                for (var e = 0; e < this.moduleCount; e++) this.modules[d][e] = null
            }
            this.setupPositionProbePattern(0, 0), this.setupPositionProbePattern(this.moduleCount - 7, 0), this.setupPositionProbePattern(0, this.moduleCount - 7), this.setupPositionAdjustPattern(), this.setupTimingPattern(), this.setupTypeInfo(a, c), this.typeNumber >= 7 && this.setupTypeNumber(a), null == this.dataCache && (this.dataCache = b.createData(this.typeNumber, this.errorCorrectLevel, this.dataList)), this.mapData(this.dataCache, c)
        },
        setupPositionProbePattern: function (a, b) {
            for (var c = -1; c <= 7; c++) if (!(a + c <= -1 || this.moduleCount <= a + c)) for (var d = -1; d <= 7; d++) b + d <= -1 || this.moduleCount <= b + d || (c >= 0 && c <= 6 && (0 == d || 6 == d) || d >= 0 && d <= 6 && (0 == c || 6 == c) || c >= 2 && c <= 4 && d >= 2 && d <= 4 ? this.modules[a + c][b + d] = !0 : this.modules[a + c][b + d] = !1)
        },
        getBestMaskPattern: function () {
            for (var a = 0, b = 0, c = 0; c < 8; c++) {
                this.makeImpl(!0, c);
                var d = f.getLostPoint(this);
                (0 == c || a > d) && (a = d, b = c)
            }
            return b
        },
        createMovieClip: function (a, b, c) {
            var d = a.createEmptyMovieClip(b, c), e = 1;
            this.make();
            for (var f = 0; f < this.modules.length; f++) for (var g = f * e, h = 0; h < this.modules[f].length; h++) {
                var i = h * e, j = this.modules[f][h];
                j && (d.beginFill(0, 100), d.moveTo(i, g), d.lineTo(i + e, g), d.lineTo(i + e, g + e), d.lineTo(i, g + e), d.endFill())
            }
            return d
        },
        setupTimingPattern: function () {
            for (var a = 8; a < this.moduleCount - 8; a++) null == this.modules[a][6] && (this.modules[a][6] = a % 2 == 0);
            for (var b = 8; b < this.moduleCount - 8; b++) null == this.modules[6][b] && (this.modules[6][b] = b % 2 == 0)
        },
        setupPositionAdjustPattern: function () {
            for (var a = f.getPatternPosition(this.typeNumber), b = 0; b < a.length; b++) for (var c = 0; c < a.length; c++) {
                var d = a[b], e = a[c];
                if (null == this.modules[d][e]) for (var g = -2; g <= 2; g++) for (var h = -2; h <= 2; h++) -2 == g || 2 == g || -2 == h || 2 == h || 0 == g && 0 == h ? this.modules[d + g][e + h] = !0 : this.modules[d + g][e + h] = !1
            }
        },
        setupTypeNumber: function (a) {
            for (var b = f.getBCHTypeNumber(this.typeNumber), c = 0; c < 18; c++) {
                var d = !a && 1 == (b >> c & 1);
                this.modules[Math.floor(c / 3)][c % 3 + this.moduleCount - 8 - 3] = d
            }
            for (var c = 0; c < 18; c++) {
                var d = !a && 1 == (b >> c & 1);
                this.modules[c % 3 + this.moduleCount - 8 - 3][Math.floor(c / 3)] = d
            }
        },
        setupTypeInfo: function (a, b) {
            for (var c = this.errorCorrectLevel << 3 | b, d = f.getBCHTypeInfo(c), e = 0; e < 15; e++) {
                var g = !a && 1 == (d >> e & 1);
                e < 6 ? this.modules[e][8] = g : e < 8 ? this.modules[e + 1][8] = g : this.modules[this.moduleCount - 15 + e][8] = g
            }
            for (var e = 0; e < 15; e++) {
                var g = !a && 1 == (d >> e & 1);
                e < 8 ? this.modules[8][this.moduleCount - e - 1] = g : e < 9 ? this.modules[8][15 - e - 1 + 1] = g : this.modules[8][15 - e - 1] = g
            }
            this.modules[this.moduleCount - 8][8] = !a
        },
        mapData: function (a, b) {
            for (var c = -1, d = this.moduleCount - 1, e = 7, g = 0, h = this.moduleCount - 1; h > 0; h -= 2) for (6 == h && h--; ;) {
                for (var i = 0; i < 2; i++) if (null == this.modules[d][h - i]) {
                    var j = !1;
                    g < a.length && (j = 1 == (a[g] >>> e & 1));
                    var k = f.getMask(b, d, h - i);
                    k && (j = !j), this.modules[d][h - i] = j, e--, e == -1 && (g++, e = 7)
                }
                if (d += c, d < 0 || this.moduleCount <= d) {
                    d -= c, c = -c; break
                }
            }
        }
    }, b.PAD0 = 236, b.PAD1 = 17, b.createData = function (a, c, d) {
        for (var e = k.getRSBlocks(a, c), g = new m, h = 0; h < d.length; h++) {
            var i = d[h];
            g.put(i.mode, 4), g.put(i.getLength(), f.getLengthInBits(i.mode, a)), i.write(g)
        }
        for (var j = 0, h = 0; h < e.length; h++) j += e[h].dataCount;
        if (g.getLengthInBits() > 8 * j) throw new Error("code length overflow. (" + g.getLengthInBits() + ">" + 8 * j + ")");
        for (g.getLengthInBits() + 4 <= 8 * j && g.put(0, 4); g.getLengthInBits() % 8 != 0;) g.putBit(!1);
        for (; !(g.getLengthInBits() >= 8 * j);) {
            if (g.put(b.PAD0, 8), g.getLengthInBits() >= 8 * j) break;
            g.put(b.PAD1, 8)
        }
        return b.createBytes(g, e)
    }, b.createBytes = function (a, b) {
        for (var c = 0, d = 0, e = 0, g = new Array(b.length), h = new Array(b.length), j = 0; j < b.length; j++) {
            var k = b[j].dataCount, l = b[j].totalCount - k;
            d = Math.max(d, k), e = Math.max(e, l), g[j] = new Array(k);
            for (var m = 0; m < g[j].length; m++) g[j][m] = 255 & a.buffer[m + c];
            c += k;
            var o = f.getErrorCorrectPolynomial(l), p = new i(g[j], o.getLength() - 1), q = p.mod(o);
            h[j] = new Array(o.getLength() - 1);
            for (var m = 0; m < h[j].length; m++) {
                var r = m + q.getLength() - h[j].length;
                h[j][m] = r >= 0 ? q.get(r) : 0
            }
        }
        for (var s = 0, m = 0; m < d; m++) for (var j = 0; j < b.length; j++) m < g[j].length && (s++, 255 & g[j][m]);
        for (var t = 0, m = 0; m < e; m++) for (var j = 0; j < b.length; j++) m < h[j].length && (t++, h[j][m]);
        var u = new n(s + t), v = 0;
        for (m = 0; m < d; m++) for (var j = 0; j < b.length; j++) m < g[j].length && (u.datacodewords[v++] = g[j][m]);
        for (m = 0; m < e; m++) for (var j = 0; j < b.length; j++) m < h[j].length && (u.eccodewords[v++] = h[j][m]);
        return u
    }; var c = function (a, b, c, d, e, f) {
        var g = {},
            h = function (a, b) {
                var c = {};
                for (var d in a) c[d] = a[d];
                for (var d in b) c[d] = b[d];
                return c
            },
            i = function (a) {
                var b = d, c = "_canvas_", g = e.createElement("canvas");
                g.setAttribute("width", a * b), g.setAttribute("height", a * b), g.style.width = a + "px", g.style.height = a + "px";
                var h = g.getContext("2d");
                return h.scale(b, b), c += Math.floor(1e3 * Math.random()), e.getElementById(c) && (c += "a"), g.setAttribute("id", c), g
            },
            j = function (a, b, c, d, e, f, g) {
                for (var h = 0; h < c; h++) for (var i = 0; i < b; i++) {
                    d.fillStyle = a.isDark(h, i) ? e : f, d.fillRect(i, h, 1, 1)
                }
                d.fillStyle = "#000", d.fillRect(0, 0, b, g), d.fillRect(0, c - g, b, g), d.fillRect(0, 0, g, c), d.fillRect(b - g, 0, g, c)
            },
            k = function (a, b, c, d, e, f, g, h) {
                var i = new Image;
                i.src = g, i.onload = function () {
                    var g = i.width, j = i.height;
                    if (g > b || j > c) alert("Image is too large, please choose a smaller one.");
                    else {
                        var k = (b - g) / 2, l = (c - j) / 2;
                        d.drawImage(i, k, l, g, j), h && h()
                    }
                }, i.onerror = function (a) {
                    console.log(a)
                }
            },
            m = function (b, c) {
                var d = i(c), e = d.getContext("2d");
                return j(b, c, c, e, a.colorDark, a.colorLight, a.quietZone), d
            },
            n = function (b, c, d) {
                var e = i(d), f = e.getContext("2d");
                return j(b, d, d, f, a.colorDark, a.colorLight, a.quietZone), k(b, d, d, f, a.colorDark, a.colorLight, c, function () {
                    j(b, d, d, f, a.colorDark, a.colorLight, a.quietZone)
                }), e
            },
            o = function (b, c, d) {
                var e = i(d), f = e.getContext("2d");
                return j(b, d, d, f, a.colorDark, a.colorLight, a.quietZone), k(b, d, d, f, a.colorDark, a.colorLight, c), e
            },
            p = function (a, b, c) {
                var d = a.getModuleCount();
                if (b < d) return console.warn("Your canvas size is too small."), !1;
                var e = i(b), f = e.getContext("2d");
                f.clearRect(0, 0, b, b), f.fillStyle = c.bgColor, f.fillRect(0, 0, b, b);
                var g = c.bgSrc;
                if (g) {
                    var h = new Image;
                    h.src = g, h.onload = function () {
                        f.drawImage(h, 0, 0, b, b), r(a, b, c, f)
                    }
                } else r(a, b, c, f);
                return e
            },
            q = function (a, b, c, d, e, f) {
                var g = new Image;
                g.src = c, g.onload = function () {
                    var c = g.width, h = g.height;
                    if (c > b || h > b) return alert("Image is too large, please choose a smaller one."), !1;
                    var i = (b - c) / 2, j = (b - h) / 2;
                    d.drawImage(g, i, j, c, h), e && e(f)
                }
            },
            r = function (a, b, c, d) {
                var e = a.getModuleCount(), f = b / e, g = c.logo, h = c.logoWidth, i = c.logoHeight, j = c.logoBackgroundColor, k = c.logoBackgroundTransparent;
                if (g) {
                    var l = h || b, m = i || b, n = (b - l) / 2, o = (b - m) / 2;
                    if (j && !k) {
                        d.fillStyle = j, d.fillRect(n, o, l, m)
                    }
                }
                for (var p = 0; p < e; p++) for (var r = 0; r < e; r++) {
                    d.fillStyle = a.isDark(p, r) ? c.colorDark : c.colorLight, d.fillRect(r * f, p * f, f, f)
                }
                g && q(a, b, g, d, null)
            },
            s = function (a) {
                var d = new b(a.correctLevel || g.CorrectLevel.H, a.typeNumber || -1);
                d.addData(a.text || ""), d.make();
                var e = a.size || 256, h = a.logo, i = a.logoWidth, j = a.logoHeight, k = a.logoBackgroundColor, l = a.logoBackgroundTransparent, m = a.bgColor, n = a.bgSrc, o = a.colorDark, q = a.colorLight, r = a.quietZone;
                return c ? p(d, e, {
                    bgColor: m,
                    bgSrc: n,
                    colorDark: o,
                    colorLight: q,
                    logo: h,
                    logoWidth: i,
                    logoHeight: j,
                    logoBackgroundColor: k,
                    logoBackgroundTransparent: l,
                    quietZone: r
                }) : null
            };
        return g.CorrectLevel = d, g.QRCode = b, g.Drawer = { draw: s }, g.CorrectLevel = d, g
    }, d = { MODE_NUMBER: 1, MODE_ALPHA_NUM: 2, MODE_8BIT_BYTE: 4, MODE_KANJI: 8 }, e = { L: 1, M: 0, Q: 3, H: 2 }, f = {
        PATTERN_POSITION_TABLE: [[], [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]],
        G15: 1335,
        G18: 7973,
        G15_MASK: 21522,
        getBCHTypeInfo: function (a) {
            for (var b = a << 10; f.getBCHDigit(b) - f.getBCHDigit(f.G15) >= 0;) b ^= f.G15 << f.getBCHDigit(b) - f.getBCHDigit(f.G15);
            return (a << 10 | b) ^ f.G15_MASK
        },
        getBCHTypeNumber: function (a) {
            for (var b = a << 12; f.getBCHDigit(b) - f.getBCHDigit(f.G18) >= 0;) b ^= f.G18 << f.getBCHDigit(b) - f.getBCHDigit(f.G18);
            return a << 12 | b
        },
        getBCHDigit: function (a) {
            for (var b = 0; 0 != a;) b++, a >>>= 1;
            return b
        },
        getPatternPosition: function (a) {
            return f.PATTERN_POSITION_TABLE[a - 1]
        },
        getMask: function (a, b, c) {
            switch (a) {
                case g.PATTERN000:
                    return (b + c) % 2 == 0;
                case g.PATTERN001:
                    return b % 2 == 0;
                case g.PATTERN010:
                    return c % 3 == 0;
                case g.PATTERN011:
                    return (b + c) % 3 == 0;
                case g.PATTERN100:
                    return (Math.floor(b / 2) + Math.floor(c / 3)) % 2 == 0;
                case g.PATTERN101:
                    return b * c % 2 + b * c % 3 == 0;
                case g.PATTERN110:
                    return (b * c % 2 + b * c % 3) % 2 == 0;
                case g.PATTERN111:
                    return (b * c % 3 + (b + c) % 2) % 2 == 0;
                default:
                    throw new Error("bad maskPattern:" + a)
            }
        },
        getErrorCorrectPolynomial: function (a) {
            for (var b = new i([1], 0), c = 0; c < a; c++) b = b.multiply(new i([1, h.gexp(c)], 0));
            return b
        },
        getLengthInBits: function (a, b) {
            if (b >= 1 && b < 10) switch (a) {
                case d.MODE_NUMBER:
                    return 10;
                case d.MODE_ALPHA_NUM:
                    return 9;
                case d.MODE_8BIT_BYTE:
                case d.MODE_KANJI:
                    return 8
            } else if (b < 27) switch (a) {
                case d.MODE_NUMBER:
                    return 12;
                case d.MODE_ALPHA_NUM:
                    return 11;
                case d.MODE_8BIT_BYTE:
                    return 16;
                case d.MODE_KANJI:
                    return 10
            } else {
                if (!(b < 41)) throw new Error("type:" + b);
                switch (a) {
                    case d.MODE_NUMBER:
                        return 14;
                    case d.MODE_ALPHA_NUM:
                        return 13;
                    case d.MODE_8BIT_BYTE:
                        return 16;
                    case d.MODE_KANJI:
                        return 12
                }
            }
            throw new Error("mode:" + a)
        },
        getLostPoint: function (a) {
            for (var b = a.getModuleCount(), c = 0, d = 0; d < b; d++) for (var e = 0; e < b; e++) {
                for (var f = 0, g = a.isDark(d, e), h = -1; h <= 1; h++) if (!(d + h < 0 || b <= d + h)) for (var i = -1; i <= 1; i++) e + i < 0 || b <= e + i || 0 == h && 0 == i || g == a.isDark(d + h, e + i) && f++;
                f > 5 && (c += 3 + f - 5)
            }
            for (var d = 0; d < b - 1; d++) for (var e = 0; e < b - 1; e++) {
                var j = 0;
                a.isDark(d, e) && j++, a.isDark(d + 1, e) && j++, a.isDark(d, e + 1) && j++, a.isDark(d + 1, e + 1) && j++, (0 == j || 4 == j) && (c += 3)
            }
            for (var d = 0; d < b; d++) for (var e = 0; e < b - 6; e++) a.isDark(d, e) && !a.isDark(d, e + 1) && a.isDark(d, e + 2) && a.isDark(d, e + 3) && a.isDark(d, e + 4) && !a.isDark(d, e + 5) && a.isDark(d, e + 6) && (c += 40);
            for (var e = 0; e < b; e++) for (var d = 0; d < b - 6; d++) a.isDark(d, e) && !a.isDark(d + 1, e) && a.isDark(d + 2, e) && a.isDark(d + 3, e) && a.isDark(d + 4, e) && !a.isDark(d + 5, e) && a.isDark(d + 6, e) && (c += 40);
            for (var k = 0, e = 0; e < b; e++) for (var d = 0; d < b; d++) a.isDark(d, e) && k++;
            var l = Math.abs(100 * k / b / b - 50) / 5;
            return c += 10 * l
        }
    }, g = { PATTERN000: 0, PATTERN001: 1, PATTERN010: 2, PATTERN011: 3, PATTERN100: 4, PATTERN101: 5, PATTERN110: 6, PATTERN111: 7 }, h = function () {
        for (var a = new Array(256), b = new Array(256), c = 0; c < 8; c++) a[c] = 1 << c;
        for (var c = 8; c < 256; c++) a[c] = a[c - 4] ^ a[c - 5] ^ a[c - 6] ^ a[c - 8];
        for (var c = 0; c < 255; c++) b[a[c]] = c;
        var d = {};
        return d.glog = function (a) {
            if (a < 1) throw new Error("glog(" + a + ")");
            return b[a]
        }, d.gexp = function (b) {
            for (; b < 0;) b += 255;
            for (; b >= 256;) b -= 255;
            return a[b]
        }, d
    }();
    i.prototype = {
        get: function (a) {
            return this.num[a]
        },
        getLength: function () {
            return this.num.length
        },
        multiply: function (a) {
            for (var b = new Array(this.getLength() + a.getLength() - 1), c = 0; c < this.getLength(); c++) for (var d = 0; d < a.getLength(); d++) b[c + d] ^= h.gexp(h.glog(this.get(c)) + h.glog(a.get(d)));
            return new i(b, 0)
        },
        mod: function (a) {
            if (this.getLength() - a.getLength() < 0) return this;
            for (var b = h.glog(this.get(0)) - h.glog(a.get(0)), c = new Array(this.getLength()), d = 0; d < this.getLength(); d++) c[d] = this.get(d);
            for (var d = 0; d < a.getLength(); d++) c[d] ^= h.gexp(h.glog(a.get(d)) + b);
            return new i(c, 0).mod(a)
        }
    }, k.RS_BLOCK_TABLE = [[1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9], [1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16], [1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13], [1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9], [1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12], [2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15], [2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14], [2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15], [2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13], [2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16], [4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13], [2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15], [4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12], [3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13], [5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12], [5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16], [1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15], [5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15], [3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14], [3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16], [4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17], [2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13], [4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16], [6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17], [8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16], [10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17], [8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16], [3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16], [7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16], [5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16], [13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16], [17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16], [17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16], [13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17], [12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16], [6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16], [17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16], [4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16], [20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16], [19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]], k.getRSBlocks = function (a, b) {
        var c = k.getRsBlockTable(a, b);
        if (void 0 == c) throw new Error("bad rs block @ typeNumber:" + a + "/errorCorrectLevel:" + b);
        for (var d = c.length / 3, e = [], f = 0; f < d; f++) for (var g = c[3 * f + 0], h = c[3 * f + 1], i = c[3 * f + 2], j = 0; j < g; j++) e.push(new k(h, i));
        return e
    }, k.getRsBlockTable = function (a, b) {
        switch (b) {
            case e.L:
                return k.RS_BLOCK_TABLE[4 * (a - 1) + 0];
            case e.M:
                return k.RS_BLOCK_TABLE[4 * (a - 1) + 1];
            case e.Q:
                return k.RS_BLOCK_TABLE[4 * (a - 1) + 2];
            case e.H:
                return k.RS_BLOCK_TABLE[4 * (a - 1) + 3];
            default:
                return
        }
    }, m.prototype = {
        get: function (a) {
            var b = Math.floor(a / 8);
            return 1 == (this.buffer[b] >>> 7 - a % 8 & 1)
        },
        put: function (a, b) {
            for (var c = 0; c < b; c++) this.putBit(1 == (a >>> b - c - 1 & 1))
        },
        getLengthInBits: function () {
            return this.length
        },
        putBit: function (a) {
            var b = Math.floor(this.length / 8);
            this.buffer.length <= b && this.buffer.push(0), a && (this.buffer[b] |= 128 >>> this.length % 8), this.length++
        }
    }, n.prototype = { addjust: function () {} }, o.prototype = {
        getRect: function () {
            return this
        }
    }, "string" == typeof define && define.amd ? define([], function () {
        return c
    }) : "undefined" != typeof exports && (exports.QRCode = c), QRCode = function (c, d) {
        var f = { text: "", size: 256, correctLevel: e.H, quietZone: 0, colorDark: "#000000", colorLight: "#ffffff", bgColor: null, bgSrc: null, logo: void 0, logoWidth: void 0, logoHeight: void 0, logoBackgroundColor: "#ffffff", logoBackgroundTransparent: !1 };
        if ("string" == typeof d && (d = { text: d }), d) for (var g in d) f[g] = d[g];
        "string" == typeof c && (c = document.getElementById(c)), this.el = c, this.options = f, this.options.text ? this.makeCode(this.options.text) : console.warn(" QRCode text is required. ")
    }, QRCode.prototype.makeCode = function (a) {
        this.clear();
        var d = new b(-1, this.options.correctLevel);
        d.addData(a), d.make();
        var e = d.getModuleCount();
        if (this.options.size < e) return console.warn("Your canvas size is too small."), !1;
        var f = document.createElement("canvas");
        f.width = this.options.size, f.height = this.options.size, f.style.width = this.options.size + "px", f.style.height = this.options.size + "px";
        var g = f.getContext("2d");
        g.clearRect(0, 0, this.options.size, this.options.size);
        var h = this.options.size / e;
        for (var i = 0; i < e; i++) for (var j = 0; j < e; j++) g.fillStyle = d.isDark(i, j) ? this.options.colorDark : this.options.colorLight, g.fillRect(j * h, i * h, h, h);
        this.el.appendChild(f)
    }, QRCode.prototype.clear = function () {
        this.el.innerHTML = ""
    }, QRCode.CorrectLevel = e
})();